AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  tndx-us-east-2-test-stack

  The Twitter ndx

Parameters:
  ParamAppName:
    Type: String
    Default: tndx
    Description: Application/stack name.

  ParamDDBParamTable:
    Type: String
    Default: tndx-parameters
    Description: DDD table to store parameters.

  ParamDDBRunnerTable:
    Type: String
    Default: tndx-runner
    Description: DDD runner table.

  ParamEnvironment:
    Type: String
    Default: staging
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment for deployment.

  ParamRegion:
    Type: String
    Default: us-east-2
    AllowedValues:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
    Description: The AWS Region for deployment.

  S3BucketName:
    Type: String
    Default: is-tndx-us-east-2
    Description: Priamry S3 bucket.

  SQSName:
    Type: String
    Default: tndx-runner
    Description: Priamry S3 bucket.

  TwitterAPIKey:
    Type: String
    Default: your-twitter-api-key
    Description: Twitter API key.

  TwitterAPISecret:
    Type: String
    Default: your-twitter-api-secret
    Description: Twitter API secret.

Globals:
  Function:
    Timeout: 60

Resources:
  DDBParametersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ParamDDBParamTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userid
          AttributeType: N
        - AttributeName: domain
          AttributeType: S
      KeySchema:
        - AttributeName: userid
          KeyType: HASH
        - AttributeName: domain
          KeyType: RANGE
      Tags:
        - Key: "Environment"
          Value: { Ref: ParamEnvironment }
        - Key: "Application"
          Value: { Ref: ParamAppName }

  DDBRunnerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ParamDDBRunnerTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: runnername
          AttributeType: S
        - AttributeName: userid
          AttributeType: N
      KeySchema:
        - AttributeName: runnername
          KeyType: HASH
        - AttributeName: userid
          KeyType: RANGE
      Tags:
        - Key: "Environment"
          Value: { Ref: ParamEnvironment }
        - Key: "Application"
          Value: { Ref: ParamAppName }

  EventTndxRunnerFavorites:
    Type: AWS::Events::Rule
    Properties:
      Description: Run a tndx runner for favorites
      ScheduleExpression: "rate(15 minutes)"
      State: DISABLED
      Targets:
        - Arn: !GetAtt FunctionTndxRunner.Arn
          Id: TargetFunctionTndxRunnerFavorites
          Input: !Sub |
            {
              "runner_name": "tndx-rmrfslashbin-01",
              "function": "favorites",
              "region": "${ParamRegion}",
              "ddb_params_table": "${DDBParametersTable}",
              "ddb_runner_table": "${DDBRunnerTable}",
              "sqs_runner_url": "${ParameterSQSRunner}",
              "s3_bucket": "${ParameterS3Bucket}",
              "twitter_api_key": "${ParameterTwitterAPIKey}",
              "twitter_api_secret": "${ParameterTwitterAPISecret}"
            }

  EventTndxRunnerFollowers:
    Type: AWS::Events::Rule
    Properties:
      Description: Run a tndx runner for followers
      ScheduleExpression: "rate(60 minutes)"
      State: DISABLED
      Targets:
        - Arn: !GetAtt FunctionTndxRunner.Arn
          Id: TargetFunctionTndxRunnerFollowers
          Input: !Sub |
            {
              "runner_name": "tndx-rmrfslashbin-01",
              "function": "followers",
              "region": "${ParamRegion}",
              "ddb_params_table": "${DDBParametersTable}",
              "ddb_runner_table": "${DDBRunnerTable}",
              "sqs_runner_url": "${ParameterSQSRunner}",
              "s3_bucket": "${ParameterS3Bucket}",
              "twitter_api_key": "${ParameterTwitterAPIKey}",
              "twitter_api_secret": "${ParameterTwitterAPISecret}"
            }

  EventTndxRunnerFriends:
    Type: AWS::Events::Rule
    Properties:
      Description: Run a tndx runner for friends
      ScheduleExpression: "rate(60 minutes)"
      State: DISABLED
      Targets:
        - Arn: !GetAtt FunctionTndxRunner.Arn
          Id: TargetFunctionTndxRunnerFriends
          Input: !Sub |
            {
              "runner_name": "tndx-rmrfslashbin-01",
              "function": "friends",
              "region": "${ParamRegion}",
              "ddb_params_table": "${DDBParametersTable}",
              "ddb_runner_table": "${DDBRunnerTable}",
              "sqs_runner_url": "${ParameterSQSRunner}",
              "s3_bucket": "${ParameterS3Bucket}",
              "twitter_api_key": "${ParameterTwitterAPIKey}",
              "twitter_api_secret": "${ParameterTwitterAPISecret}"
            }

  EventTndxRunnerTimeline:
    Type: AWS::Events::Rule
    Properties:
      Description: Run a tndx runner for timeline
      ScheduleExpression: "rate(5 minutes)"
      State: DISABLED
      Targets:
        - Arn: !GetAtt FunctionTndxRunner.Arn
          Id: TargetFunctionTndxRunnerTimeline
          Input: !Sub |
            {
              "runner_name": "tndx-rmrfslashbin-01",
              "function": "timeline",
              "region": "${ParamRegion}",
              "ddb_params_table": "${DDBParametersTable}",
              "ddb_runner_table": "${DDBRunnerTable}",
              "sqs_runner_url": "${ParameterSQSRunner}",
              "s3_bucket": "${ParameterS3Bucket}",
              "twitter_api_key": "${ParameterTwitterAPIKey}",
              "twitter_api_secret": "${ParameterTwitterAPISecret}"
            }

  EventTndxRunnerUser:
    Type: AWS::Events::Rule
    Properties:
      Description: Run a tndx runner for user
      ScheduleExpression: "rate(12 hours)"
      State: DISABLED
      Targets:
        - Arn: !GetAtt FunctionTndxRunner.Arn
          Id: TargetFunctionTndxRunnerUser
          Input: !Sub |
            {
              "runner_name": "tndx-rmrfslashbin-01",
              "function": "user",
              "region": "${ParamRegion}",
              "ddb_params_table": "${DDBParametersTable}",
              "ddb_runner_table": "${DDBRunnerTable}",
              "sqs_runner_url": "${ParameterSQSRunner}",
              "s3_bucket": "${ParameterS3Bucket}",
              "twitter_api_key": "${ParameterTwitterAPIKey}",
              "twitter_api_secret": "${ParameterTwitterAPISecret}"
            }

  FunctionTndxProcessor:
    Type: AWS::Serverless::Function
    Properties:
      Description: Tndx Processor
      FunctionName: !Sub ${ParamAppName}-processor-${ParamEnvironment}
      CodeUri: ../bin/lambda-sqs
      Handler: bootstrap
      Runtime: provided.al2
      Architectures: [arm64]
      Role: !GetAtt RoleLambdaExecution.Arn
      Tags:
        Environment: { Ref: ParamEnvironment }
        Application: { Ref: ParamAppName }
      Events:
        EventSQSTndxRunnerToFunctionTndxProcessor:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSTndxRunner.Arn
            Enabled: true

  FunctionTndxRunner:
    Type: AWS::Serverless::Function
    Properties:
      Description: Runner function
      FunctionName: !Sub ${ParamAppName}-runner-${ParamEnvironment}
      CodeUri: ../bin/lambda-runner
      Handler: bootstrap
      Runtime: provided.al2
      Architectures: [arm64]
      Role: !GetAtt RoleLambdaExecution.Arn
      Tags:
        Environment: { Ref: ParamEnvironment }
        Application: { Ref: ParamAppName }

  ParameterDDBParams:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tndx/ddb/parameters
      Type: String
      Value: { Ref: ParamDDBParamTable }
      Description: tndx ddb parameters table
      Tags:
        Environment: { Ref: ParamEnvironment }
        Application: { Ref: ParamAppName }

  ParameterDDBRunner:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tndx/ddb/runner
      Type: String
      Value: { Ref: ParamDDBRunnerTable }
      Description: tndx ddb parameters table
      Tags:
        Environment: { Ref: ParamEnvironment }
        Application: { Ref: ParamAppName }

  ParameterRegion:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tndx/region
      Type: String
      Value: { Ref: ParamRegion }
      Description: tndx region
      Tags:
        Environment: { Ref: ParamEnvironment }
        Application: { Ref: ParamAppName }

  ParameterS3Bucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tndx/s3/bucket
      Type: String
      Value: { Ref: S3Bucket }
      Description: tndx S3 Bucket
      Tags:
        Environment: { Ref: ParamEnvironment }
        Application: { Ref: ParamAppName }

  ParameterSQSRunner:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tndx/sqs/runner/url
      Type: String
      Value: { Ref: SQSTndxRunner }
      Description: SQS Runner URL
      Tags:
        nvironment: { Ref: ParamEnvironment }
        Application: { Ref: ParamAppName }

  ParameterTwitterAPIKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tndx/twitter/api/key
      Type: String
      Value: { Ref: TwitterAPIKey }
      Description: Twitter API Key
      Tags:
        Environment: { Ref: ParamEnvironment }
        Application: { Ref: ParamAppName }

  ParameterTwitterAPISecret:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tndx/twitter/api/secret
      Type: String
      Value: { Ref: TwitterAPISecret }
      Description: Twitter API Secret
      Tags:
        Environment: { Ref: ParamEnvironment }
        Application: { Ref: ParamAppName }

  PermissionForEventsToInvokeFunctionTndxRunnerFavorites:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FunctionTndxRunner
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventTndxRunnerFavorites.Arn

  PermissionForEventsToInvokeFunctionTndxRunnerFollowers:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FunctionTndxRunner
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventTndxRunnerFollowers.Arn

  PermissionForEventsToInvokeFunctionTndxRunnerFriends:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FunctionTndxRunner
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventTndxRunnerFriends.Arn

  PermissionForEventsToInvokeFunctionTndxRunnerTimeline:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FunctionTndxRunner
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventTndxRunnerTimeline.Arn

  PermissionForEventsToInvokeFunctionTndxRunnerUser:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FunctionTndxRunner
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventTndxRunnerUser.Arn

  PolicyTndxDDBAccess:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "TndxDDBAccess"
      Roles:
        - !Ref RoleLambdaExecution
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
            Resource:
              - !GetAtt DDBParametersTable.Arn
              - !GetAtt DDBRunnerTable.Arn

  PolicyTndxS3Access:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "TndxS3Access"
      Roles:
        - !Ref RoleLambdaExecution
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource: !Sub
              - arn:aws:s3:::${Bucket}
              - { Bucket: !Ref S3BucketName }
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub
              - arn:aws:s3:::${Bucket}/*
              - { Bucket: !Ref S3BucketName }

  PolicyTndxSQSAccess:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "TndxSQSAccess"
      Roles:
        - !Ref RoleLambdaExecution
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource:
              - !GetAtt SQSTndxRunner.Arn

  PolicyTndxSSMAccess:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "TndxParameterStoreAccess"
      Roles:
        - !Ref RoleLambdaExecution
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ssm:GetParameter*"
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/tndx*"

  RoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Tags:
        - Key: "Environment"
          Value: { Ref: ParamEnvironment }
        - Key: "Application"
          Value: { Ref: ParamAppName }

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: { Ref: S3BucketName }
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: "Environment"
          Value: { Ref: ParamEnvironment }
        - Key: "Application"
          Value: { Ref: ParamAppName }

  SQSTndxRunner:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: { Ref: SQSName }
      KmsMasterKeyId: alias/aws/sqs
      VisibilityTimeout: 60
      Tags:
        - Key: "Environment"
          Value: { Ref: ParamEnvironment }
        - Key: "Application"
          Value: { Ref: ParamAppName }
